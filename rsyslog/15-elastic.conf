#load needed modules
module(load="mmjsonparse") #for parsing CEE-enhanced syslog messages
module(load="omelasticsearch") #for indexing to Elasticsearch

#try to parse a structured log
#action(type="mmjsonparse")
*.* :mmjsonparse:

# Suricata index
# Use suricata timestamp from JSON
# Independant of syslog, thus should be usable for offline PCAP loading (suricata -r)
template(name="suricata-index" type="list") {
  constant(value="suricata-") 
  property(name="$!timestamp" position.from="1" position.to="4")
  constant(value=".") 
  property(name="$!timestamp" position.from="6" position.to="7")
  constant(value=".") 
  property(name="$!timestamp" position.from="9" position.to="10")
  constant(value=".") 
  property(name="$!timestamp" position.from="12" position.to="13")
}
template(name="cee-index" type="list") {
  constant(value="cee-") 
  property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
  constant(value=".") 
  property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
  constant(value=".") 
  property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
  constant(value=".") 
  property(name="timereported" dateFormat="rfc3339" position.from="12" position.to="13")
}
template(name="syslog-index" type="list") {
  constant(value="syslog-") 
  property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="4")
  constant(value=".") 
  property(name="timereported" dateFormat="rfc3339" position.from="6" position.to="7")
  constant(value=".") 
  property(name="timereported" dateFormat="rfc3339" position.from="9" position.to="10")
  constant(value=".") 
  property(name="timereported" dateFormat="rfc3339" position.from="12" position.to="13")
}

# Add syslog timestamp and hostname to JSON
template(name="customTemplate" type="list") {
  constant(value="{\"@timestamp\":\"") property(name="timereported" dateFormat="rfc3339")
  constant(value="\",\"hostname\":\"") property(name="hostname" format="json")
  constant(value="\",") property(name="$!all-json" position.from="2")
}
template(name="syslog"
         type="list"
         option.json="on") {
           constant(value="{")
             constant(value="\"timestamp\":\"")      property(name="timereported" dateFormat="rfc3339")
             constant(value="\",\"message\":\"")     property(name="msg")
             constant(value="\",\"host\":\"")        property(name="hostname")
             constant(value="\",\"severity\":\"")    property(name="syslogseverity-text")
             constant(value="\",\"facility\":\"")    property(name="syslogfacility-text")
             constant(value="\",\"syslogtag\":\"")   property(name="syslogtag")
             constant(value="\",\"program\":\"")     property(name="programname")
           constant(value="\"}")
         }

if $syslogtag contains 'suricata' and $msg startswith '@cee:' then {
# write the JSON message to the local ES node
  if $parsesuccess == "OK" then action( 
    type="omelasticsearch"
    template="customTemplate"
    searchIndex="suricata-index"
    dynSearchIndex="on"
    bulkmode="on"
    queue.type="linkedlist"
    queue.size="5000"
    queue.dequeuebatchsize="300"
  )
} else if $msg startswith '@cee:' then {
# write the JSON message to the local ES node
  if $parsesuccess == "OK" then action( 
    type="omelasticsearch"
    template="customTemplate"
    searchIndex="cee-index"
    dynSearchIndex="on"
    bulkmode="on"
    queue.type="linkedlist"
    queue.size="5000"
    queue.dequeuebatchsize="300"
  )
} else if $syslogtag contains 'apache' then { 
  action(
    type="omfwd"
    target="127.0.0.1"
    port="10514"
    protocol="tcp"
  )
} else if $syslogtag contains 'smbd' then { 
  action(
    type="omfwd"
    target="127.0.0.1"
    port="10514"
    protocol="tcp"
  )
} else {
  action(
    type="omelasticsearch"
    template="syslog"
    searchIndex="syslog-index"
    dynSearchIndex="on"
    bulkmode="on"
    queue.type="linkedlist"
    queue.size="5000"
    queue.dequeuebatchsize="300"
  )
}
#stop
